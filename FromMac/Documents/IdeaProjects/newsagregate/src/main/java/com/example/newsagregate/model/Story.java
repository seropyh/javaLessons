
package com.example.newsagregate.model;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
@JsonPropertyOrder({
    "id",
    "internalID",
    "title",
    "summary",
    "autoGeneratedSummary",
    "abstract",
    "published",
    "updatedAt",
    "wordCount",
    "secondaryBrands",
    "byline",
    "shortURL",
    "longURL",
    "primaryCategory",
    "primarySite",
    "eyebrowSite",
    "readings",
    "image",
    "thumbnailImage",
    "card",
    "contentTags",
    "franchise"
})
public class Story {

    @JsonProperty("id")
    private String id;
    @JsonProperty("internalID")
    private String internalID;
    @JsonProperty("title")
    private String title;
    @JsonProperty("summary")
    private String summary;
    @JsonProperty("autoGeneratedSummary")
    private String autoGeneratedSummary;
    @JsonProperty("abstract")
    private List<String> _abstract = null;
    @JsonProperty("published")
    private Integer published;
    @JsonProperty("updatedAt")
    private Integer updatedAt;
    @JsonProperty("wordCount")
    private Integer wordCount;
    @JsonProperty("secondaryBrands")
    private List<String> secondaryBrands = null;
    @JsonProperty("byline")
    private String byline;
    @JsonProperty("shortURL")
    private String shortURL;
    @JsonProperty("longURL")
    private String longURL;
    @JsonProperty("primaryCategory")
    private String primaryCategory;
    @JsonProperty("primarySite")
    private String primarySite;
    @JsonProperty("eyebrowSite")
    private String eyebrowSite;
    @JsonProperty("readings")
    private List<Reading> readings = null;
    @JsonProperty("image")
    private String image;
    @JsonProperty("thumbnailImage")
    private String thumbnailImage;
    @JsonProperty("card")
    private String card;
    @JsonProperty("contentTags")
    private List<ContentTag> contentTags = null;
    @JsonProperty("franchise")
    private String franchise;
    @JsonIgnore
    private Map<String, Object> additionalProperties = new HashMap<String, Object>();

    /**
     * 
     * @param summary
     * @param primarySite
     * @param image
     * @param franchise
     * @param wordCount
     * @param shortURL
     * @param published
     * @param title
     * @param _abstract
     * @param internalID
     * @param secondaryBrands
     * @param autoGeneratedSummary
     * @param readings
     * @param primaryCategory
     * @param eyebrowSite
     * @param longURL
     * @param id
     * @param thumbnailImage
     * @param byline
     * @param card
     * @param updatedAt
     * @param contentTags
     */









    @Override
    public String toString() {
        return new ToStringBuilder(this).append("id", id).append("internalID", internalID).append("title", title).append("summary", summary).append("autoGeneratedSummary", autoGeneratedSummary).append("_abstract", _abstract).append("published", published).append("updatedAt", updatedAt).append("wordCount", wordCount).append("secondaryBrands", secondaryBrands).append("byline", byline).append("shortURL", shortURL).append("longURL", longURL).append("primaryCategory", primaryCategory).append("primarySite", primarySite).append("eyebrowSite", eyebrowSite).append("readings", readings).append("image", image).append("thumbnailImage", thumbnailImage).append("card", card).append("contentTags", contentTags).append("franchise", franchise).append("additionalProperties", additionalProperties).toString();
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(summary).append(primarySite).append(image).append(franchise).append(wordCount).append(shortURL).append(published).append(title).append(_abstract).append(internalID).append(secondaryBrands).append(autoGeneratedSummary).append(readings).append(primaryCategory).append(eyebrowSite).append(longURL).append(id).append(additionalProperties).append(thumbnailImage).append(byline).append(card).append(updatedAt).append(contentTags).toHashCode();
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Story) == false) {
            return false;
        }
        Story rhs = ((Story) other);
        return new EqualsBuilder().append(summary, rhs.summary).append(primarySite, rhs.primarySite).append(image, rhs.image).append(franchise, rhs.franchise).append(wordCount, rhs.wordCount).append(shortURL, rhs.shortURL).append(published, rhs.published).append(title, rhs.title).append(_abstract, rhs._abstract).append(internalID, rhs.internalID).append(secondaryBrands, rhs.secondaryBrands).append(autoGeneratedSummary, rhs.autoGeneratedSummary).append(readings, rhs.readings).append(primaryCategory, rhs.primaryCategory).append(eyebrowSite, rhs.eyebrowSite).append(longURL, rhs.longURL).append(id, rhs.id).append(additionalProperties, rhs.additionalProperties).append(thumbnailImage, rhs.thumbnailImage).append(byline, rhs.byline).append(card, rhs.card).append(updatedAt, rhs.updatedAt).append(contentTags, rhs.contentTags).isEquals();
    }

}
